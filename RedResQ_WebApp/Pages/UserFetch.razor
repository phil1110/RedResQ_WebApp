@page "/users"
@using RedResQ_WebApp.Lib.Services
@using RedResQ_WebApp.Lib.Models
@inject IJSRuntime JSRuntime

<PageTitle>User Overview</PageTitle>


<div class="container-fluid">
    <h3>User Overview</h3>

    @if (_users.Count > 0)
    {
        <table class="table table-striped mt-3">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Username</th>
                    <th>Email</th>
                    <th>Birthdate</th>
                    <th>Gender</th>
                    <th>Action</th>

                </tr>
            </thead>
            <tbody>
                @foreach (User user in _users)
                {
                    <tr>
                        <td>@user.Id</td>
                        <td>@user.Username</td>
                        <td>@user.Email</td>
                        <td>@user.Birthdate.ToString("d")</td>
                        <td>@user.Gender.Name</td>
                        <td>
                            <button class="btn btn-light" style="background-color: transparent; border: none;" @onclick="()=>ShowDeleteConfirmation(user.Id)">
                                <i class="oi oi-trash text-danger"></i>
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <div class="text-center mt-3">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
</div>

<div class="container-fluid text-center">
    <button class="btn btn-primary mt-3" @onclick="()=>FetchUsers(null)">Show more Users</button>
    <br />
    <br />
</div>

<div class="container-fluid">
    <h3>Search User</h3>
    <div>
        <label>Search User by Username:</label>
        <input type="text" class="form-control" @bind="searchUsername" />
    </div>
    <button class="btn btn-primary mt-3" @onclick="SearchUser">Search</button>
</div>


@if (_foundUsers.Count > 0)
{
    <h3>Found Users</h3>
    <table class="table table-striped mt-3">
        <tbody>
            @foreach (User user in _foundUsers)
            {
                <tr>
                    <td>@user.Id</td>
                    <td>@user.Username</td>
                    <td>@user.Email</td>
                    <td>@user.Birthdate.ToString("d")</td>
                    <td>@user.Gender.Name</td>
                </tr>
            }
        </tbody>
    </table>
}


@* 
<div class="container-fluid">
    <h3>Delete User</h3>
    <div>
        <label>Delete User by ID:</label>
        <input type="number" class="form-control" @bind="deleteUserId" />
    </div>
</div>
<div class="container-fluid text-center">
    <button class="btn btn-danger mt-3" @onclick="() => ShowDeleteConfirmation(deleteUserId)">Delete</button>
    <br />
    <br />
</div>
 *@



@code {
    List<User> _users = new List<User>();
    List<User> _foundUsers = new List<User>();
    string? searchUsername;
    long deleteUserId;

    protected override async Task OnInitializedAsync()
    {
        await FetchUsers(null);
    }

    async Task FetchUsers(int? amount)
    {
        Console.WriteLine("FetchUsers method called");

        User[] rcvdUsers;
        long? id = null;

        if (_users.Count > 0)
        {
            id = _users[_users.Count - 1].Id;
        }

        rcvdUsers = await UserService.Fetch(id, amount);

        if (rcvdUsers != null)
        {
            _users.AddRange(rcvdUsers);
            StateHasChanged();
        }
    }

    async Task SearchUser()
    {
        try
        {
            Console.WriteLine("SearchUser method called");

            if (!string.IsNullOrWhiteSpace(searchUsername))
            {
                User? foundUser = await UserService.Search(searchUsername);

                if (foundUser != null)
                {
                    Console.WriteLine($"User found: {foundUser.Username}");
                    _foundUsers = new List<User> { foundUser };
                }
                else
                {
                    Console.WriteLine("User not found");
                }
            }
            else
            {
                Console.WriteLine("Please enter a username to search.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error searching user. Message: {ex.Message}");
        }
        finally
        {
            StateHasChanged();
        }
    }




    async Task ShowDeleteConfirmation(long userId)
    {
        var result = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this user?");
        if (result)
        {
            deleteUserId = userId;
            await DeleteUser();
        }
    }


    async Task DeleteUser()
    {
        Console.WriteLine("DeleteUser method called");

        if (deleteUserId > 0)
        {
            try
            {
                await UserService.Delete(deleteUserId);
                Console.WriteLine($"User with ID {deleteUserId} successfully deleted");
                _users.RemoveAll(user => user.Id == deleteUserId);
                StateHasChanged();
            }
            catch (HttpRequestException ex)
            {
                Console.WriteLine($"Error deleting user. Message: {ex.Message}");
            }
        }
    }

}
