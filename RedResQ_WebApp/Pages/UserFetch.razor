@page "/users"
@inject UserService UserService
@inject NavigationManager navManager
@using RedResQ_WebApp.Lib.Services
@using RedResQ_WebApp.Lib.Models
@inject IJSRuntime JSRuntime

<PageTitle>User Overview</PageTitle>

<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css" rel="stylesheet">


<div class="container-fluid">
    <h3>User Overview</h3>
    <br />
    <div class="d-flex align-items-center">
        <input type="text" class="form-control me-2" placeholder="Username" @bind="searchUsername" />
        <button class="btn btn-primary" @onclick="SearchUser">Search</button>
    </div>
</div>


<div class="container-fluid">

    @if (_foundUsers.Count > 0)
    {
        <table class="table table-striped mt-3">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Username</th>
                    <th>Email</th>
                    <th>Birthdate</th>
                    <th>Gender</th>
                    <th>Action</th>

                </tr>
            </thead>
            <tbody>
                @foreach (User user in _foundUsers)
                {
                    <tr>
                        <td>@user.Id</td>
                        <td>@user.Username</td>
                        <td>@user.Email</td>
                        <td>@user.Birthdate.ToString("d")</td>
                        <td>@user.Gender.Name</td>
                        <td>
                            <button class="btn btn-light" style="background-color: transparent; border: none;" @onclick="()=>ShowDeleteConfirmation(user.Id)">
                                <i class="oi oi-trash text-danger"></i>
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>




<div class="container-fluid">
    @if (_users.Count > 0)
    {
        <table class="table table-striped mt-3">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Username</th>
                    <th>Email</th>
                    <th>Birthdate</th>
                    <th>Gender</th>
                    <th>Action</th>

                </tr>
            </thead>
            <tbody>
                @foreach (User user in _users)
                {
                    <tr>
                        <td>@user.Id</td>
                        <td>@user.Username</td>
                        <td>@user.Email</td>
                        <td>@user.Birthdate.ToString("d")</td>
                        <td>@user.Gender.Name</td>
                        <td>
                            <button class="btn btn-light" style="background-color: transparent; border: none;" @onclick="()=>EditUser(user.Id)">
                                <i class="fa fa-pencil-alt"></i>
                            </button>
                            <button class="btn btn-light" style="background-color: transparent; border: none;" @onclick="()=>ShowDeleteConfirmation(user.Id)">
                                <i class="oi oi-trash text-danger"></i>
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <div class="text-center mt-3">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
</div>

<div class="container-fluid text-center">
    <button class="btn btn-primary mt-3" @onclick="()=>FetchUsers(null)">Show more Users</button>
    <br />
    <br />
</div>


@code {
    List<User> _users = new List<User>();
    List<User> _foundUsers = new List<User>();
    string? searchUsername;
    long deleteUserId;

    protected override async Task OnInitializedAsync()
    {
        await FetchUsers(null);
    }

    async Task FetchUsers(int? amount)
    {
        Console.WriteLine("FetchUsers method called");

        User[] rcvdUsers;
        long? id = null;

        if (_users.Count > 0)
        {
            id = _users[_users.Count - 1].Id;
        }

        rcvdUsers = await UserService.Fetch(id, amount);

        if (rcvdUsers != null)
        {
            _users.AddRange(rcvdUsers);
            StateHasChanged();
        }
    }

    async Task SearchUser()
    {
        try
        {
            Console.WriteLine("SearchUser method called");

            if (!string.IsNullOrWhiteSpace(searchUsername))
            {
                User[]? foundUsers = await UserService.Search(searchUsername);

                if (foundUsers != null)
                {
                    _foundUsers = new List<User>();
                    _foundUsers.AddRange(foundUsers);
                }
                else
                {
                    Console.WriteLine("User not found");
                }
            }
            else
            {
                Console.WriteLine("Please enter a username to search.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error searching user. Message: {ex.Message}");
        }
        finally
        {
            StateHasChanged();
        }
    }




    async Task ShowDeleteConfirmation(long userId)
    {
        var result = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this user?");
        if (result)
        {
            deleteUserId = userId;
            await DeleteUser();
        }
    }


    async Task DeleteUser()
    {
        Console.WriteLine("DeleteUser method called");

        if (deleteUserId > 0)
        {
            try
            {
                await UserService.Delete(deleteUserId);
                Console.WriteLine($"User with ID {deleteUserId} successfully deleted");
                _users.RemoveAll(user => user.Id == deleteUserId);
                StateHasChanged();
            }
            catch (HttpRequestException ex)
            {
                Console.WriteLine($"Error deleting user. Message: {ex.Message}");
            }
        }
    }

    async Task EditUser(long id)
    {
        navManager.NavigateTo($"/user/edit/{id}", true);
    }
}
