@page "/fetchdata"
@using RedResQ_WebApp.Lib.Services

<PageTitle>Article Demo</PageTitle>

<h1>Article Demo</h1>

<p>This page Demonstrates fetching Articles from the API</p>



@if (articles == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="overflow-scroll w-100" style="overflow-y: hidden !important">
        <table class="table">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Title</th>
                    <th>Content</th>
                    <th>Author</th>
                    <th>Date</th>
                    <th>Language</th>
                    <th>Image</th>
                    <th>City</th>
                    <th>PostalCode</th>
                    <th>Country</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var article in articles)
                {
                    <tr>
                        <td>@article.Id</td>
                        <td>@article.Title</td>
                        <td>@(article.Content.Substring(0, Math.Min(article.Content.Length - 1, 50)) + "...")</td>
                        <td>@article.Author</td>
                        <td>@article.Date</td>
                        <td>@article.Language.Name</td>
                        <td>@article.Image.Source</td>
                        <td>@article.Location.City</td>
                        <td>@article.Location.PostalCode</td>
                        <td>@article.Location.Country</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <div class="container">
        <div class="text-center">
            <button class="btn btn-primary w-50" @onclick="() => LoadMoreArticles(articles[articles.Length - 1].Id)">Load More Articles</button>
        </div>

        <br />
    </div>
}

@code {
    private Article[]? articles;

    protected override async Task OnInitializedAsync()
    {
        List<Article>? articleList = new List<Article>();

        if(articles != null)
        {
            articleList.AddRange(articles!);            
        }

        articleList.AddRange(await ArticleService.GetArticles());

        articles = articleList.ToArray();
    }

    private async Task LoadMoreArticles(long articleId)
    {
        List<Article>? articleList = new List<Article>();

        if (articles != null)
        {
            articleList.AddRange(articles!);
            articles = null!;
        }

        articleList.AddRange(await ArticleService.GetArticles(articleId));

        articles = articleList.ToArray();
    }
}
