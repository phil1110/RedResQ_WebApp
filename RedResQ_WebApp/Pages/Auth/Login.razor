@using RedResQ_WebApp.Authentication;
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navManager
@inject IJSRuntime js


<div id="authcontainer" class="h-100 py-0">
    <div id="authbox" class="px-4 pb-2 pt-3 w-25 border border-2 rounded-10 shadow-lg bg-light">
        <div class="mb-3 text-center">
            <h3 class="fw-bolder">RedResQ</h3>
            <p class="fw-bolder">Login Portal</p>

        </div>
        <div class="mb-3">
            <label class="fw-bold ">Identifier</label>
            <input @bind="Identifier" class="form-control custom-rounded-input" placeholder="User name or email address" />
        </div>
        <div class="mb-3">
            <label class="fw-bold">Password</label>
            <input @bind="Secret" type="password" class="form-control custom-rounded-input" placeholder="Enter your password" />
        </div>
        <div class="mb-3 d-grid gap-2">
            <button @onclick="Authenticate" class="btn btn-primary custom-rounded-input custom-red">
                <span class="fw-bold">Login</span>
            </button>
        </div>
    </div>
</div>

@code {
    private string? Identifier { get; set; }
    private string? Secret { get; set; }

    private async void Authenticate()
    {
        try
        {
            var token = await AuthService.Login(Identifier!, Secret!);

            if (token == null)
            {
                await js.InvokeVoidAsync("alert", "Invalid User Name or Password");
                return;
            }

            var customAuthStateProvider = (AuthStateProvider)authStateProvider;

            await customAuthStateProvider.UpdateAuthenticationState(TokenService.GetClaims(token));

            navManager.NavigateTo("/", true);
        }
        catch (Exception ex)
        {
            await js.InvokeVoidAsync("alert", ex.Message);
        }
    }
}
