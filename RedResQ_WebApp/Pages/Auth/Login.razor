@using RedResQ_WebApp.Authentication;
@inject UserAccountService userAccountService
@inject IJSRuntime js
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navManager

<div id="authcontainer" class="h-100 py-0">
    <div id="authbox" class="px-4 pb-2 pt-3 w-50 border border-2 rounded-3">
        <div class="mb-3 text-center">
            <h3 class="fw-bolder">LOGIN</h3>
        </div>
        <div class="mb-3">
            <label class="fw-bold">Identifier</label>
            <input @bind="model.UserName" class="form-control" placeholder="User name or email address" />
        </div>
        <div class="mb-3">
            <label class="fw-bold">Password</label>
            <input @bind="model.Password" type="password" class="form-control" placeholder="Enter your password" />
        </div>
        <div class="mb-3 d-grid gap-2">
            <button @onclick="Authenticate" class="btn btn-primary">
                <span class="fw-bold">Login</span>
            </button>
        </div>
    </div>
</div>

@code {
    private class Model
    {
        public string UserName { get; set; }
        public string Password { get; set; }

    }

    private Model model = new Model();

    private async Task Authenticate()
    {
        var userAccount = userAccountService.GetUserByName(model.UserName);
        if (userAccount == null || userAccount.Password != model.Password)
        {
            await js.InvokeVoidAsync("alert", "Invalid User Name or Password");
            return;
        }

        var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;

        await customAuthStateProvider.UpdateAuthenticationState(new UserSession
            {
                UserName = userAccount.UserName,
                Role = userAccount.Role
            });

        navManager.NavigateTo("/", true);
    }
}
