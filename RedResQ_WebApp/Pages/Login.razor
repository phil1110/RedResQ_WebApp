@page "/login"
@using RedResQ_WebApp.Authentication;
@inject UserAccountService userAccountService
@inject IJSRuntime js
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navManager

<link href="css/futuristic-login.css" rel="stylesheet" />


<div class="login-page">
    <div class="kugel"></div>
    <div class="kugel"></div>
    <div class="kugel"></div>

    <div class="container">
        <div class="row justify-content-center">
            <div class="col-md-6 col-lg-4">
                <div class="login-box">
                    <div class="login-logo mb-4">
                        <h3>RedResQ</h3>
                        <h5>Nice to see you</h5>
                    </div>
                    <form>
                        <div class="form-group mb-3">
                            <input type="text" class="form-control" id="userName" placeholder="User Name">
                        </div>
                        <div class="form-group mb-3">
                            <input type="password" class="form-control" id="password" placeholder="Password">
                        </div>
                        <br />
                        <div class="d-grid gap-2">
                            <button type="submit" class="btn btn-primary btn-block">Login</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>


@code {
    private class Model
    {
        public string UserName{get; set;}
        public string Password { get; set; }

    }

    private Model model = new Model();

    private async Task Authenticate()
    {
        var userAccount = userAccountService.GetUserByName(model.UserName);
        if (userAccount == null || userAccount.Password != model.Password)
        {
            await js.InvokeVoidAsync("alert", "Invalid User Name or Password");
            return; 
        }

        var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;

        await customAuthStateProvider.UpdateAuthenticationState(new UserSession
        {
            UserName = userAccount.UserName, 
            Role = userAccount.Role
        });

        navManager.NavigateTo("/", true);
    }
}
