@page "/stats"
@using ChartJs.Blazor.PieChart
@using ChartJs.Blazor.BarChart

<PageTitle>Statistics</PageTitle>

<ul class="nav nav-tabs">
	<li class="nav-item">
		<button class="nav-link @(activeTab == statTypes[0] ? "active" : "")" @onclick="@(() => SetActiveTab(statTypes[0]))">@(statTypes[0].ToString())</button>
	</li>
	<li class="nav-item">
		<button class="nav-link @(activeTab == statTypes[1] ? "active" : "")" @onclick="@(() => SetActiveTab(statTypes[1]))">@(statTypes[1].ToString())</button>
	</li>
	<li class="nav-item">
		<button class="nav-link @(activeTab == statTypes[2] ? "active" : "")" @onclick="@(() => SetActiveTab(statTypes[2]))">@(statTypes[2].ToString())</button>
	</li>
</ul>

@if (activeTab == statTypes[0])
{
	<div>
		<Chart Config="_pieConfig"></Chart>
	</div>
}
else if (activeTab == statTypes[1])
{
	<div>
@* 		<Chart Config="@_barConfig"></Chart>
 *@	</div>
}
else if (activeTab == statTypes[2])
{
	<div>
		<h3>Bar Chart</h3>
	</div>
}


@code {
	private PieConfig _pieConfig;
	private BarConfig _barConfig;
	private string[] statTypes;

	private string activeTab = "pie";

	protected async override Task OnInitializedAsync()
	{
		statTypes = await StatService.GetStatTypes();

		ConfigurePieConfig();
	}

	private void SetActiveTab(string tabName)
	{
		activeTab = tabName;

		if (activeTab == statTypes[0])
		{
			ConfigurePieConfig();
		}
		else if (activeTab == statTypes[1])
		{

		}
		else if (activeTab == statTypes[2])
		{

		}

		StateHasChanged();
	}

	private async void ConfigureLeastAtemptStat()
	{
		Dictionary<string, long> stat;
		stat = await StatService.GetStatByType(statTypes[0]);

		_barConfig = new BarConfig();
		_barConfig.Options = new BarOptions
		{
			Responsive = true,
			Title = new OptionsTitle
			{
				Display = true,
				Text = statTypes[0].ToString()
			}
		};
	}


	private void ConfigurePieConfig()
	{
		_pieConfig = new PieConfig();

		_pieConfig.Options = new PieOptions
			{
				Responsive = true,
				Title = new OptionsTitle
				{
					Display = true,
					Text = "First PieChart"
				}
			};

		foreach (var quiz in new[] { "Earthquake", "Tornado", "Tsunami", "Flood", "Vulcano" })
		{
			_pieConfig.Data.Labels.Add(quiz);
		}

		var dataset = new PieDataset<long>()
			{
				BackgroundColor = new[]
				{
					ColorUtil.ColorHexString(255, 215, 0),
					ColorUtil.ColorHexString(0, 206, 209),
					ColorUtil.ColorHexString(255, 111, 97),
					ColorUtil.ColorHexString(144, 238, 144),
					ColorUtil.ColorHexString(255, 0, 255)
				}
			};

		_pieConfig.Data.Datasets.Add(dataset);
	}
}
