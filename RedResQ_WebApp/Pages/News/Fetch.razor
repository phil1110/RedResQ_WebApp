@page "/news"
@inject NavigationManager NavManager
@inject IJSRuntime JSRuntime

<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css" rel="stylesheet">

<div class="container-fluid">
    <h2>News Overview</h2>
    <br />
    <div class="mb-2">
        <button class="btn btn-primary" @onclick="NavigateToCreateNews">
            <i class="fas fa-plus"></i> Add News
        </button>
    </div>

    <table class="table white-table">
        <thead>
            <tr>
                <th>Filter by:</th>
                <th>
                    Country: 
                    <InputSelect class="w-50" TValue="long?" @bind-Value="@_countryId">
                        <option value="@(-1)">None</option>
                        @foreach (Country? country in _countries)
                        {
                            <option value="@country.Id">@country.CountryName</option>
                        }
                    </InputSelect>
                </th>
                <th>
                    Language: 
                    <InputSelect class="w-50" TValue="long?" @bind-Value="@_languageId">
                        <option value="@(-1)">None</option>
                        @foreach (Language? language in _languages)
                        {
                            <option value="@language.Id">@language.Name</option>
                        }
                    </InputSelect>
                </th>
            </tr>
        </thead>
       @*  <tbody>
            <tr>
                <td></td>
                <td>
                    <InputSelect class="w-50" TValue="long?" @bind-Value="@_countryId">
                        <option value="@(-1)">None</option>
                        @foreach (Country? country in _countries)
                        {
                            <option value="@country.Id">@country.CountryName</option>
                        }
                    </InputSelect>
                </td>
                <td>
                    <InputSelect class="w-50" TValue="long?" @bind-Value="@_languageId">
                        <option value="@(-1)">None</option>
                        @foreach (Language? language in _languages)
                        {
                            <option value="@language.Id">@language.Name</option>
                        }
                    </InputSelect>
                </td>
            </tr>
        </tbody> *@
    </table>
</div>

<style>
     .white-table {
        background-color: white !important; 
        border-collapse: collapse;  
        border: none;  
    }

         .white-table th,
        .white-table td {
            border: none !important;
        }
</style>




<div class="container-fluid">

    @if (_articles.Count > 0)
    {
        <table class="table table-striped mt-3">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Title</th>
                    <th>Content</th>
                    <th>Author</th>
                    <th>Date</th>
                    <th>Language</th>
                    <th>Image description</th>
                    <th>Country</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
                @foreach (Article article in _articles)
                {
                    <tr>
                        <td>@article.Id</td>
                        <td>@article.Title</td>
                        <td>@(article.Content.Length > 15 ? article.Content.Substring(0, 15) + "..." : article.Content)</td>
                        <td>@article.Author</td>
                        <td>@article.Date.ToString("d")</td>
                        <td>@article.Language.Name</td>
                        <td>@article.Image?.Description</td>
                        <td>@article.Country.CountryName</td>
                        <td>
                            <button class="btn btn-light" style="background-color: transparent; border: none;" @onclick="() => EditArticle(article.Id)">
                                <i class="fa fa-pencil-alt"></i>
                            </button>
                            <button class="btn btn-light" style="background-color: transparent; border: none;" @onclick="() => ShowDeleteConfirmation(article.Id)">
                                <i class="oi oi-trash text-danger"></i>
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        if (_showButton)
        {
            <div class="w-100 text-center">
                <button class="btn btn-primary w-50" @onclick="() => FetchArticles()">
                    <span>Load more Articles</span>
                </button>
            </div>
        }
    }
</div>



@code {
    private List<Article> _articles;

    private List<Country> _countries;
    private List<Language> _languages;

    long? _articleId = null;
    long? _countryId = null;
    long? _languageId = null;
    long? deleteArticleId = null;

    bool _showButton = true;

    public Fetch()
    {
        _countries = new List<Country>();
        _languages = new List<Language>();
        _articles = new List<Article>();
    }

    protected override async Task OnInitializedAsync()
    {
        _countries.AddRange(await CountryService.Fetch());
        _languages.AddRange(await LanguageService.Fetch());

        await FetchArticles();
    }

    private async Task FetchArticles()
    {
        var articles = await NewsService.FetchArticles(_articleId, (_countryId > -1 ? _countryId : null), (_languageId > -1 ? _languageId : null));

        if (articles != null)
        {
            _articles.AddRange(articles);

            _articleId = _articles[_articles.Count - 1].Id;
        }
        else
        {
            _showButton = false;
        }
    }

    private async Task EditArticle(long articleId)
    {
        NavManager.NavigateTo($"/article/edit/{articleId}");
    }

    private async Task ShowDeleteConfirmation(long articleId)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete this article?");
        if (confirmed)
        {
            deleteArticleId = articleId;
            await DeleteArticle();
        }
    }

    private async Task DeleteArticle()
    {
        if (deleteArticleId.HasValue)
        {
            try
            {
                await NewsService.Delete(deleteArticleId.Value);
                _articles.RemoveAll(article => article.Id == deleteArticleId);
                deleteArticleId = null;
                StateHasChanged();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error deleting article: {ex.Message}");
            }
        }
    }

    private void NavigateToCreateNews()
    {
        NavManager.NavigateTo("/createNews");
    }
}
